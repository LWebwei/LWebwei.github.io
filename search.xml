<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[lightoj 数论专题]]></title>
    <url>%2F2017%2F08%2F21%2Flightoj%E6%95%B0%E8%AE%BA%E4%B8%93%E9%A2%98%2F</url>
    <content type="text"><![CDATA[1007: 题意：求[a,b]范围内所有整数的欧拉函数的平方和。欧拉函数：求不大于其本身的与其互质的数的个数。题解： 预处理，欧拉函数筛选下，之后保存前n项和,sum[n]。答案就是ans=sum[b]-sum[a-1]。(这个题就是一个欧拉函数打表模板题，掌握欧拉函数的打表是解决本题的关键) 1014： 题意：有C个人，给P个食物，每人吃Q个，剩L个。然后给你P和L(Q&gt;L)，让你求Q的可能情况，如果有多种可能，从小到大输出；如果不存在，输出impossible题解：这个题直接暴力分解因子就可以了，不解释 1028：题意：求一个数n，有多少种进制表示方法，使得末尾为0题解：这个题主要是一个想法，进制转化的时候，只有整除最后的那个一位才是0 。所以这个题就变成了一个n除以其范围以内的数，多少个数可以整除（除1外）这里用到一个知识点，就是任何一个数都可以拆分成质因子的幂次相乘的方式，x = p1^x1 p2^x2 p3^x3…其中pi是素数，xi为正整数.而最后约数个数就等于answer=（x1+1)(x2+1)(x3+1)*….. 本题最后减去1就好了，因为没有1进制 1035：题意：就是把一个数分解成质因子的幂次相乘就可以了题解：素数打表直接搞就可以了 1045：题意：求 n 的阶乘在 base 进制下的位数题解：这个首先联想一下十进制，log10（n）+ 1就是 n 的在十进制下的位数，由此可知 log base（n） 就是n在base 进制下的位数，再根据换底公式，log base（n） == log（n）/ log（base），这里让求的是阶乘，根据log的原理呢，就有log base （n！） == （ log（n） + log（n-1） + log（n-2） + 。。。。+ log（1）） / log（base）。用 sum 数组存一下 log（n！) 就可以快速的求出了。 1067：题意：求组合数C(n,m) ;题解：如果是在大概30范围以内的直接打表就可以了，但是这个题的范围是1e6，很明显不可以。下面来详细的说一下这个题，这题用到了逆元+Lucas先说一下 Lucas定理：C(n,m)%p=C(n/p,m/p)C(n%p,m%p)%p组合数 C（n,m） = n! / (m! (n - m)! ) 这里是除法，怎么变成乘法呢，这里用到了费马小定理 费马小定理a ^ (p-1) = 1 (%p)，两边同时除去a——a ^ (p-2) = a^-1 (%p)，得a的逆元a^-1 = a ^ (p-2)。（逆元其实就是a的倒数，在算法里面叫逆元）下面开始解这个题，首先看一下组合数的那个公式，不管怎么样都不可避免用这个公式，但是怎样进行除法取余呢 ，根据费马小定理就可以变成乘法，那个 1/(m! (n-m)!) 就可以看做（m! (n-m)!)^(p-2) ,p是题里给的取余的那个数，这里幂次用快速幂处理一下就好了。然后Lucas定理作为一个递归处理，每次把 C(n%p,m%p) 算出来，然后n,m不断递归除以p直到位0. 这样这个题就解出来了，贴一下代码吧 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556// &gt;File Name: 1067.cpp// &gt; Author: Webwei #include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std; const ll mod = 1000003; ll PowerMod(ll a,ll b,ll c) &#123; ll ans = 1; while(b) &#123; if(b&amp;1) ans = (ans*a)%c; b=b/2; a=(a*a)%c; &#125; return ans; &#125; ll fac[1000005]; void get_fac(ll p)&#123; fac[0] = 1; for(int i = 1; i &lt;= p; i++) fac[i] = (fac[i-1]*i) % p;&#125; ll Lucas(ll n,ll m,ll p)&#123; ll tmp = 1; while(n &amp;&amp; m)&#123; ll a = n%p,b = m%p; if(a &lt; b) return 0; tmp = (tmp*fac[a]*PowerMod(fac[b]*fac[a-b]%p,p - 2, p)) % p; n/=p; m/=p; &#125; return tmp;&#125; int n,m; int main()&#123; get_fac(mod); int T; cin&gt;&gt;T; for(int t=1;t&lt;=T;t++)&#123; cin&gt;&gt;n&gt;&gt;m; int ans = Lucas(n,m,mod); cout&lt;&lt;&quot;Case &quot;&lt;&lt;t&lt;&lt;&quot;: &quot;&lt;&lt;ans&lt;&lt;&apos;\n&apos;; &#125; return 0;&#125; 1077:题意：给出一条线段的两个端点，求在这条线段上有多少个整数点题解：（这个题如果知道结论就是一个大水题i，不知道的话或许是np难题）一段线段(x1,y1)(x2,y2)上的整数点个数为gcd(abs(x2-x1),abs(y2-y1))+1 1090：题目大意：给出n,r,p,q四个数字1&lt;=n,r,p,q&lt;=1000000，求出C(n,r)(p^q)的末尾有几个0？解题思路： 先预处理打表搞出1e6以内数字末尾0的个数。然后对于C(n, r)中0的2的个数可以写成f[n]-f[r]-f[n-r]，其中f[i]表示i!中2的个数;5的个数同样也可以求出。p^q这个2的个数就是(f[p]-f[p-1])q; 最后取 2 和5 统计的总的最小值 1234567891011121314151617181920212223242526272829303132333435363738// &gt;File Name: 1090.cpp// &gt; Author: Webwei #include&lt;bits/stdc++.h&gt;using namespace std; const int maxn = 1e6+10;struct node&#123; int x , y;&#125;a[maxn]; int main()&#123; int t, n, r, p, q, l=1; int x=0,y=0; for(int i = 2; i&lt;maxn; i++)&#123; int num=i; while(num%2==0)&#123; x++; num/=2; &#125; num = i; while(num % 5 == 0)&#123; y++; num /=5; &#125; a[i].x = x; a[i].y = y; &#125; cin&gt;&gt;t; while(t--)&#123; cin&gt;&gt;n&gt;&gt;r&gt;&gt;p&gt;&gt;q; long long res = min(a[n].x-a[r].x-a[n-r].x+(a[p].x-a[p-1].x)*q,a[n].y-a[r].y-a[n-r].y+( a[p].y-a[p-1].y)*q); cout&lt;&lt;&quot;Case &quot;&lt;&lt;l++&lt;&lt;&quot;: &quot;&lt;&lt;res&lt;&lt;&apos;\n&apos;; &#125; return 0;&#125; 1098 ：题意：对于每个数求除1和本身的约数和，然后求前n个数的所有这种约数的和；题解：首先可以知道对于约数考虑就好了，对于1-n的约数，n/2-1(减1是因为2不算啊)就是约数为2出现过的次数 。如果n不是很大，那么直接sum就好了；但是这里n很大，所以搞sqrt(n)，对于&gt;sqrt(n)的约数，也就是对于q=n/i,比如n=100,n/7=12,很明显[10,12]所有的数都可以乘以7，而且满足&lt;=n，所以[10,12]都是前N个里面的约数；考虑不要重复，比如100的时候sqrt(100)=10，所以每次加上[sqrt(n)+1,n/i] 12345678910111213141516171819202122232425262728#include &lt;bits/stdc++.h&gt; using namespace std; typedef long long LL; int main() &#123; LL n; LL ans,m; int T,cas=1; scanf(&quot;%d&quot;,&amp;T); while(T--) &#123; LL q,p; scanf(&quot;%lld&quot;,&amp;n); ans=0; m=(LL)sqrt(n); for(LL i=2;i&lt;=m;i++) &#123; q=n/i; ans=ans+(q-1)*i; p=m+1; if(p&gt;q) continue; ans=ans+(q-p+1)*(q+p)/2; &#125; printf(&quot;Case %d: %lld\n&quot;,cas++,ans); &#125; return 0; &#125; 1109 :题意；求因子个数，按因子个数由小到大把对应的数输出，如果因子个数相同的话按大的数输出题解：水题，搞个结构体排序就好了。 1138：题意：给出一个数阶乘末尾0的个数，求这个数是多少题解：这个题直接二分查找这个数就好了，写二分的时候注意点细节就好 1163：题意：一个数A，如果A去掉它的最后一位就变成了B，给你一个A-B，求A；题解：由题意知道A-A/10=B，设A的最后一位数为x，所以说10A-((A/10)10+x)=B10-x，化简得9A=10B-x,所以说只需要枚举最后一位数x就行了，x范围为[0,9]。注意结果会爆longlong，所以用unsigned long long。]]></content>
      <categories>
        <category>习题</category>
      </categories>
      <tags>
        <tag>数论 lightoj</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[欧拉函数模板]]></title>
    <url>%2F2017%2F08%2F08%2F%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[对正整数n，欧拉函数是小于n的正整数中与n互质的数的数目（φ(1)=1）欧拉函数打表： 1234567891011121314151617const int maxn=5e6+10;long long phi[maxn];void phi_table()&#123; memset(phi,0,sizeof(phi)); phi[1]=1; for(int i=2; i &lt;= maxn ; i++)&#123; if(!phi[i])&#123; for(int j=i;j&lt;maxn;j+=i)&#123; if(!phi[j]) phi[j]=j; phi[j]=phi[j]/i*(i-1); &#125; &#125; &#125; phi[0]=0;&#125;]]></content>
      <categories>
        <category>acm模板</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大区间素数筛选]]></title>
    <url>%2F2017%2F08%2F07%2F%E5%A4%A7%E5%8C%BA%E9%97%B4%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%2F</url>
    <content type="text"><![CDATA[大区间素数筛选： 筛两次，第一次筛出1到1000000的素数，因为1000000^2已经超出int范围，这样的素数足够了。函数getPrim()； prime[ ] 存第一次筛出的素数，总个数为prime[0]第二次利用已经筛出的素数去筛L,R之间的素数函数getPrime2(); isprime[] 判断该数是否为素数 prime2[ ]筛出的素数有哪些，一共有prime2[0]个 12345678910111213141516171819202122232425262728293031323334353637383940414243444546const int maxn=1e6;int prime[maxn+10];int ans ;void getPrime()&#123; memset(prime,0,sizeof(prime));//一开始prime都设为0代表都是素数（反向思考） for(int i=2;i&lt;=maxn;i++) &#123; if(!prime[i]) prime[++prime[0]]=i; for(int j=1;j&lt;=prime[0]&amp;&amp;prime[j]&lt;=maxn/i;j++) &#123; prime[prime[j]*i]=1;//prime[k]=1；k不是素数 if(i%prime[j]==0) break; &#125; &#125;&#125;bool isprime[maxn+10];int prime2[maxn+10];int getPrime2(int L,int R)&#123; ans = 0; memset(isprime,1,sizeof(isprime)); //isprime[0]=isprime[1]=0;//这句话不能加，考虑到左区间为2的时候，加上这一句，素数2,3会被判成合数 if(L&lt;2) L=2; for(int i=1;i&lt;=prime[0]&amp;&amp;(long long)prime[i]*prime[i]&lt;=R;i++) &#123; int s=L/prime[i]+(L%prime[i]&gt;0);//计算第一个比L大且能被prime[i]整除的数是prime[i]的几倍,从此处开始筛 if(s==1)//很特殊,如果从1开始筛的话，那么2会被筛成非素数 s=2; for(int j=s;(long long)j*prime[i]&lt;=R;j++) if((long long)j*prime[i]&gt;=L) isprime[j*prime[i]-L]=false; //区间映射 &#125; prime2[0]=0; for(int i=0;i&lt;=R-L;i++)&#123; if(isprime[i])&#123; prime2[++prime2[0]]=i+L; ans++; &#125; &#125; return ans;&#125;]]></content>
      <categories>
        <category>acm模板</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[素数筛选+分解因子]]></title>
    <url>%2F2017%2F08%2F04%2F%E7%B4%A0%E6%95%B0%E7%AD%9B%E9%80%89%2B%E5%88%86%E8%A7%A3%E5%9B%A0%E5%AD%90%2F</url>
    <content type="text"><![CDATA[由易到难：lightoj1028-&gt;hdu6069 lightoj1028 : http://www.lightoj.com/volume_showproblem.PHP?problem=1028求一个数n，有多少种进制表示方法，使得末尾为0.我们首先要想到这个n转化为其他进制如果末尾是0的话，只需要n可以整除这个数，换言之就是求n这个数在2-n范围内的约数。如果n很小的话（n]]></content>
      <categories>
        <category>习题</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[组合数模板]]></title>
    <url>%2F2017%2F08%2F04%2F%E7%BB%84%E5%90%88%E6%95%B0%E6%A8%A1%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[组合数打表： 12345678910int C[33][33];void init()&#123; C[0][0]=C[1][0]=C[1][1]=1; for(int i=2;i&lt;33;i++)&#123; C[i][0]=1; for(int j=1;j&lt;i;j++) C[i][j]=C[i-1][j-1] + C[i-1][j]; C[i][i]=1; &#125;&#125;]]></content>
      <categories>
        <category>acm模板</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最长递增子序列]]></title>
    <url>%2F2017%2F07%2F25%2F%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97%2F</url>
    <content type="text"><![CDATA[最长递增子序列： 12345678910111213141516171819202122#define inf 0x3f3f3f3fint num[50000+11];int num2[50000+11];int main()&#123; int n; scanf(&quot;%d&quot;,&amp;n); fill(num2,num2+n+10,inf); num2[0]=-inf; for(int i=1;i&lt;=n;++i) scanf(&quot;%d&quot;,&amp;num[i]); int ans=1; for(int i=1;i&lt;=n;++i) &#123; int pos=upper_bound(num2,num2+n+10,num[i])-num2; num2[pos]=num[i]; if(pos&gt;ans) ans=pos; &#125; printf(&quot;%d\n&quot;,ans); return 0;&#125;]]></content>
      <categories>
        <category>acm模板</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[矩阵快速幂]]></title>
    <url>%2F2017%2F07%2F25%2F%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%2F</url>
    <content type="text"><![CDATA[矩阵快速幂： 123456789101112ll PowerMod(ll a,ll b) &#123; int ans=1; a=a%mod; while(b&gt;0) &#123; if(b%2==1) ans=(ans*a)%mod; b=b/2; a=(a*a)%mod; &#125; return ans; &#125;]]></content>
      <categories>
        <category>acm模板</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[位运算技巧题]]></title>
    <url>%2F2017%2F07%2F25%2F%E4%BD%8D%E8%BF%90%E7%AE%97%2F</url>
    <content type="text"><![CDATA[题目一: 题目链接：http://codeforces.com/contest/484/problem/A 题目大意：给定区间l，r，找到一个数x，保证x在区间上，并且要求1的出现次数最多的前提下数值尽量小。 解题思路：默认x为全1的二进制数，每次从最高为判断，看最高位的1变为0后大于r，就将该为变成0；落在区间上则即 为要照的答案；小于l则表示该为不能为0. 123456789101112131415161718192021#include&lt;bits/stdc++.h&gt;#define ll long long using namespace std;ll n,l, r,ans;int main()&#123; while(cin&gt;&gt;n)&#123; for(int i=0;i&lt;n;i++)&#123; cin&gt;&gt;l&gt;&gt;r; ans=(1LL&lt;&lt;62)-1; for(int i=61;i&gt;=0;i--)&#123; if(r&gt;=ans&amp;&amp;ans&gt;=l) break; if((ans^(1LL&lt;&lt;i))&lt;l) continue; ans^=(1LL&lt;&lt;i); &#125; cout&lt;&lt;ans&lt;&lt;&apos;\n&apos;; &#125; &#125; return 0;&#125; 题目二：题目链接：http://www.lightoj.com/volume_showproblem.php?problem=1042题目大意：对于输入的Ｎ，输出比Ｎ大的第一个二进制中１的个数相同的数。分析：Ｎ最大可以去到1e9，所以可以知道，暴力一个个枚举是行不通的。题目要求输出二进制表示中１的位数相同的首个大于Ｎ的数，所以应该不难想到要用位运算去寻找答案。 在《挑战程序设计竞赛》这本书中，在谈到集合的那一部分，有一个关于用位运算表示集合的专栏，里面的介绍就有本题解法的相关知识。 我们可以知道，0101110之后的是0110011，0111110之后的是1001111。那么怎么通过位运算快速得得到我们想要的数呢。 可以通过一下步骤： （１）求出最低位的1开始的连续的1的区间(0101110-&gt;0001110) （２）将这一区间全部变为0，并将区间左侧的那个0变为1(0101110-&gt;0110000) （３）将第（１）步里取出的区间右移，直到剩下的1的个数减少了1个(0001110-&gt;0000011) （４）将第（２）步和第（３）步的结果按位取或(0110000|0000011=0110011)（以上思路就是最一般的方法，有点贪心的思想）对于为零的整数，N&amp;(-N)的值就是将其最低位的1独立出来后的值。这是由于计算机中负数采用二进制补码表示，-Ｎ实际上对应于(～Ｎ)＋１(将Ｎ按位取反然后加上1)。 将最低位的1取出后，设它为x。那么通过计算y=Ｎ+x，就将Ｎ从最低位的1开始的连续的1都置为0了。我们来比较一下~y和Ｎ。在N中加入x后没有变化的位，在~y中全部取相反的值。而最低位1开始的连续区间在~y中依然是1，区间左侧的那个0在~y中也依然是0。于是通过计算z=N&amp;~y就得到了最低位1开始的连续区间。比如如果N=0101110，则x=0000010，y=0110000，z=0001110。 同时，y也恰好是第（２）步要求的值那么首先将z不断右移，知道最低位为1，这通过计算z/x即可完成。这样再将z/x右移1位就得到了第（３）要求的值。 123456789101112131415161718#include&lt;bits/stdc++.h&gt;#define ll long long using namespace std;int main()&#123; int T,t = 1; cin&gt;&gt;T; while(T--)&#123; int n,m,x,y; cin&gt;&gt;n; x = n &amp; (-n); y = x + n; m = (((~y)&amp;n)/x &gt;&gt; 1)|y; cout&lt;&lt;&quot;Case &quot;&lt;&lt;t++&lt;&lt;&quot;: &quot;&lt;&lt;m&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>位运算</category>
      </categories>
      <tags>
        <tag>位运算操作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[矩阵乘法]]></title>
    <url>%2F2017%2F06%2F18%2F%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%2F</url>
    <content type="text"><![CDATA[矩阵乘法： 123456789101112131415/* 假设 A 是 m*p 的矩阵 , B 是 p*n 的矩阵 记 C = AB (C 是 矩阵 A与B的乘积) 那么 C 是 m*n 的矩阵 */ for (int i = 1;i &lt;= m;++i)//A的行 &#123; for (int j = 1;j &lt;= n;++j)//B的列 &#123; for (int k = 1;k &lt;= p;++k)//通过公式求C &#123; C[i][j] += A[i][k]*B[k][j]; &#125; &#125; &#125;]]></content>
      <categories>
        <category>acm模板</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codeforces#264总结]]></title>
    <url>%2F2017%2F05%2F11%2Fcodeforces-264%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[A：题目链接：http://codeforces.com/contest/463/problem/A题目大意：Caisa去超市买东西，有s美元，一美元等于100每分，现在给定n种商品的价格x美元y美分，超市找零是用糖果替代美分，一美分一颗糖果，Caisa想要尽量多的糖果。水题，直接遍历一遍就好 代码如下： 12345678910111213141516// &gt;File Name: cf#264A.cpp// &gt; Author: Webwei#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int n,s,ans=-1,x,y; cin&gt;&gt;n&gt;&gt;s; for(int i=0;i&lt;n;i++)&#123; cin&gt;&gt;x&gt;&gt;y; if(x&lt;s||(x==s&amp;&amp;y==0)) ans=max(ans,y==0?0:100-y); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; B:题目链接：http://codeforces.com/contest/463/problem/B题目大意：给定n个位置的高度，0的位置为0，每次移动一步时，需要消耗hi−hi+1的能量，一开始能量为0，过程中能量不能为负，一美元可以买一点能量，问说最小开销。 这道题一般的思路就是边走边维护使能量不为负，但是大佬的做法直接看到了是求数列的最大值即可。大佬的代码： 12345678910111213141516#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;int main () &#123; int n, x, ans = 0; scanf(&quot;%d&quot;, &amp;n); for (int i = 1; i &lt;= n; i++) &#123; scanf(&quot;%d&quot;, &amp;x); ans = max(ans, x); &#125; printf(&quot;%d\n&quot;, ans); return 0;&#125; C：题目链接：http://codeforces.com/contest/463/problem/C题目大意： 在国际象棋的棋盘上放两个主教，这个两个主教不能攻击到同一个格子，最后的得分是这两个主教的攻击的格子上的分数之和。求最大的分数。（国际象棋规则主教的行走路线是斜着走）解题思路：因为攻击的范围是对角线，所以两个主教一个在黑格，一个在白格。画个图就可以发现一旦一个主教放在了黑格，那么剩下的黑格是都不能在放主教的，否则就是攻击到相同的格子。所以求出每条对角线的和，通过这个得出每个格子作为主教的得分，最后黑白格分开讨论。在求出每条对角线的和的时候的巧妙优化我觉得要好好借鉴学习一下。（另外cin没加优化的时候尽然超时了，gg）代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243#include&lt;bits/stdc++.h&gt;#define ll long longusing namespace std;ll a[2005][2005];ll d1[4010],d2[4010];int main()&#123; ios::sync_with_stdio(0); cin.tie(0); int n; cin&gt;&gt;n; memset(d1,0,sizeof(d1)); memset(d2,0,sizeof(d2)); for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=n;j++)&#123; cin&gt;&gt;a[i][j]; d1[i+j]+=a[i][j]; d2[i-j+n]+=a[i][j]; &#125; &#125; ll odd = -1,even = -1; ll oddx,oddy,evenx,eveny; for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=n;j++)&#123; if((i+j)&amp;1)&#123; if(odd&lt;d1[i+j]+d2[i-j+n]-a[i][j])&#123; odd=d1[i+j]+d2[i-j+n]-a[i][j]; oddx=i; oddy=j; &#125; &#125; else&#123; if(even&lt;d1[i+j]+d2[i-j+n]-a[i][j])&#123; even=d1[i+j]+d2[i-j+n]-a[i][j]; evenx=i; eveny=j; &#125; &#125; &#125; &#125; cout&lt;&lt;odd+even&lt;&lt;&apos;\n&apos;&lt;&lt;oddx&lt;&lt;&quot; &quot;&lt;&lt;oddy&lt;&lt;&quot; &quot;&lt;&lt;evenx&lt;&lt;&quot; &quot;&lt;&lt;eveny&lt;&lt;&apos;\n&apos;; return 0;&#125; D；题目链接：http://codeforces.com/contest/463/problem/D题目大意：求k个序列的最长公共子序列。 首先求两个序列的最长公共子序列就是基础的dp这里类比在总结一下两个序列的最长公共子序列两个串的话LCS(x,y) =(1) LCS(x - 1,y - 1) + 1 如果Ax ＝ By(2) max(LCS(x – 1, y) , LCS(x, y – 1)) 如果Ax ≠ By(3) 0 如果x = 0或者y = 0如果要输出最长公共子序列的话加上标记就好了。先贴一下这个的代码：输入：abcicbaabdkscab输出：abca代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;char str1[1010];char str2[1010];int dp[1010][1010];int flag[1010][1010];char str3[1010];int main()&#123; scanf(&quot;%s%s&quot;, str1, str2); memset(dp, 0, sizeof(dp)); memset(flag, 0, sizeof(flag)); int i, j; int len1 = strlen(str1); int len2 = strlen(str2); for (i = 1; i &lt;= len1; i++) for (j = 1; j &lt;= len2; j++) &#123; if (str1[i - 1] == str2[j - 1]) &#123; dp[i][j] = dp[i - 1][j - 1] + 1; flag[i][j] = 1; &#125; else &#123; dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]); if (dp[i][j] == dp[i][j - 1]) flag[i][j] = 2; else if (dp[i][j] == dp[i - 1][j]) flag[i][j] = 3; &#125; &#125; int m = 0; while (len1&gt;0 &amp;&amp; len2&gt;0) &#123; if (flag[len1][len2] == 1) &#123; str3[m++] = str1[len1 - 1]; len1--; len2--; &#125; else if (flag[len1][len2] == 2) len2--; else if (flag[len1][len2] == 3) len1--; &#125; for (i = m - 1; i &gt;= 0; i--) printf(&quot;%c&quot;, str3[i]); printf(&quot;\n&quot;);&#125; 接下来回到D题，这个题应该也是dp，但是要怎么dp呢。看代码解释吧： 12345678910111213141516171819202122232425262728293031323334#include &lt;iostream&gt; #include &lt;cstdio&gt; using namespace std; int n,k; int position[5][1000];//记录position[i][j]记录第i行中，数字j出现的位置。 int a[5][1000];//记录数列 int dp[1000];//dp[i]表示，以下标i结尾的最长公共子序列长度。 int main(void) &#123; while(cin&gt;&gt;n&gt;&gt;k)&#123; for(int i=0;i&lt;k;i++)&#123; for(int j=0;j&lt;n;j++)&#123; scanf(&quot;%d&quot;,&amp;a[i][j]); position[i][--a[i][j]]=j; &#125; &#125; int ans=0; for(int j=0;j&lt;n;++j)&#123;//对于 j int maxn=0; for(int p=0;p &lt;j;++p)&#123;//对于 以（j之前的每个点） 结尾的最长序列，判断j可不可以加进去 int i; for(i=1;i&lt;k&amp;&amp;position[i][a[0][p]]&lt;position[i][a[0][j]];++i) ; if(i==k&amp;&amp;dp[p]&gt;maxn)&#123;//求这些可以加进去的点中，dp值最大的一个 maxn=dp[p];// &#125; &#125; dp[j]=maxn+1;//本点dp值=最大dp值加上1 ans=max(ans,dp[j]);//求每一点dp值最大的一个。 &#125; printf(&quot;%d\n&quot;,ans); &#125; return 0; &#125; &lt;深刻领悟，不断进步&gt;]]></content>
      <categories>
        <category>习题</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[水题优化（持续更新）]]></title>
    <url>%2F2017%2F05%2F06%2F%E6%B0%B4%E9%A2%98%E4%BC%98%E5%8C%96%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[（这篇文章会持续不断的更新补题）题目链接：http://codeforces.com/contest/496/problem/A题目大意 : 给出有 n 个数的序列，然后通过删除除了第一个数和最后一个数的任意一个位置的数，求出删除这个数之后序列的最大相邻差是多少，然后删除下一个数，继续求出最大相邻差，直到删到倒数第二个数，最后从这些最大相邻差中找出最小的那个输出。例如：有序列为1 2 3 7 8，删除第二个、第三个、第四个数后得到的序列分别为：(1, 3, 7, 8)， (1, 2, 7, 8)， (1, 2, 3, 8)。那么最大相邻差分别为 4,5,5，选出最小的那个就是答案 4 。 这个题给的范围是n在100以内，所以可以直接暴力来搞，复杂度 O(n^2) ，这种做法应该都会。 但是如果n在1e5又该怎么办？这里就说一下这个优化，就是统计相邻的最大的，和隔开的两个数的最小的，这两者取最大值就好了，算法复杂度为 2*O(n);从而达到了优化代码如下： 12345678910111213141516#include&lt;bits/stdc++.h&gt;using namespace std;int a[100010]; int main()&#123; int n; cin&gt;&gt;n; int ans=0; int temp=0x3f3f3f3f; for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i]; for(int i=1;i&lt;n;i++) ans=max(ans,a[i+1]-a[i]); for(int i=2;i&lt;n;i++) temp=min(temp,a[i+1]-a[i-1]); cout&lt;&lt;max(temp,ans)&lt;&lt;endl; return 0;&#125; 题目链接：http://codeforces.com/problemset/problem/363/B题目大意：找n个数中连续k个数的和最小 这个题也不叫优化吧，但是想放在这里，就是如果n小的话就可以用暴力直接解决了，但是这个n是比较大的，当时没有想到，其实只要遍历找一次就好了用sum[0]保存a[0]到a[k-1]项的和，那么sum[1]就可以表示为sum[0]-a[0]+a[k]，以此类推。把时间复杂度降到了O(n)；代码如下： 1234567891011121314151617181920212223#include&lt;bits/stdc++.h&gt;using namespace std;int a[500010];int main()&#123; ios::sync_with_stdio(0); cin.tie(0); int n,k; cin&gt;&gt;n&gt;&gt;k; int sum=0,ans=0; int jg=1; for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i]; for(int i=1;i&lt;=k;i++) sum+=a[i]; ans=sum; for(int i=k+1;i&lt;=n;i++)&#123; sum=sum+a[i]-a[i-k]; if(sum&lt;ans) ans=sum,jg=i-k+1; &#125; cout&lt;&lt;jg&lt;&lt;&apos;\n&apos;; return 0;&#125;]]></content>
      <categories>
        <category>优化</category>
      </categories>
      <tags>
        <tag>水题之优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建博客有感]]></title>
    <url>%2F2017%2F04%2F29%2Fmy-new-post%2F</url>
    <content type="text"><![CDATA[首先要感谢这两篇文章，一个是hexo+GitHub 搭建博客教程，一个是hexo next主题的配置。链接1：http://opiece.me/2015/04/09/hexo-guide/链接2：http://blog.csdn.net/zuoziji416/article/details/53204478 我主要说一下在搭建博客的时候遇到的问题。首先那个命令 hexo d,没有结果，到后来的时候百度问题，发现有个人说要先设置git身份信息 12&gt; $ git config --global user.name &quot;你的用户名&quot;&gt; $ git config --global user.email &quot;你的邮箱&quot; 然后这样发布博客或者更改配置的时候 hexo d 就可以了。然后就是next 主题设置，由于多说评论今年6月1号的时候就要关停服务了，所以没有再加入评论功能。然后上面教程是用的百度站长统计访问量，我发现用这个更加简洁方便一点 LeanCloud。这个可以搜一下教程。 然后就基本没有什么了。那两个教程基本也都有了。注意有一个大坑！尽量不要用 hexo clean ！尽量不要用 hexo clean !尽量不要用 hexo clean ！重要的话说三次，每次一用这个，hexo d 就失效，就得按上面 重新设置身份信息。 蒽，总算搭好了自己的博客，感觉还不错！]]></content>
      <categories>
        <category>搭博客</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
</search>